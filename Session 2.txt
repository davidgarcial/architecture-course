SESION 02
=========

docker start mongo-database maria-database postgres-database sql-database mysql-database

https://www.rabbitmq.com/documentation.html

docker pull rabbitmq:3-management

docker run -d -p 15672:15672 -p 5672:5672 --name rabbitmq-service -e RABBITMQ_DEFAULT_USER=aforo255 -e RABBITMQ_DEFAULT_PASS=aforo255 rabbitmq:3-management



Aforo255.Cross.Event



  "rabbitmq": {
    "username": "aforo255",
    "password": "aforo255",
    "virtualHost": "/",
    "port": 5672,
    "hostname": "localhost"
  }











using Aforo255.Cross.Event.Src.Events;

namespace MS.AFORO255.Deposit.Messages.Events
{
    public class TransactionCreatedEvent : Event
    {
        public TransactionCreatedEvent(int idTransaction, decimal amount, string type, 
            string creationDate, int accountId)
        {
            IdTransaction = idTransaction;
            Amount = amount;
            Type = type;
            CreationDate = creationDate;
            AccountId = accountId;
        }

        public int IdTransaction { get; set; }
        public decimal Amount { get; set; }
        public string Type { get; set; }
        public string CreationDate { get; set; }
        public int AccountId { get; set; }

    }
}






using Aforo255.Cross.Event.Src.Commands;

namespace MS.AFORO255.Deposit.Messages.Commands
{
    public class TransactionCreateCommand : Command
    {
        public TransactionCreateCommand(int idTransaction, decimal amount, string type,
            string creationDate, int accountId)
        {
            IdTransaction = idTransaction;
            Amount = amount;
            Type = type;
            CreationDate = creationDate;
            AccountId = accountId;
        }

        public int IdTransaction { get; set; }
        public decimal Amount { get; set; }
        public string Type { get; set; }
        public string CreationDate { get; set; }
        public int AccountId { get; set; }
    }
}














using Aforo255.Cross.Event.Src.Bus;
using MediatR;
using MS.AFORO255.Deposit.Messages.Commands;
using MS.AFORO255.Deposit.Messages.Events;
using System.Threading;
using System.Threading.Tasks;

namespace MS.AFORO255.Deposit.Messages.CommandHandlers
{
    public class TransactionCommandHandler : IRequestHandler<TransactionCreateCommand, bool>
    {
        private readonly IEventBus _bus;

        public TransactionCommandHandler(IEventBus bus)
        {
            _bus = bus;
        }

        public Task<bool> Handle(TransactionCreateCommand request, 
            CancellationToken cancellationToken)
        {
            _bus.Publish(new TransactionCreatedEvent(
                    request.IdTransaction,
                    request.Amount,
                    request.Type,
                    request.CreationDate,
                    request.AccountId
                ));
            return Task.FromResult(true);
        }
    }
}





MediatR.Extensions.Microsoft.DependencyInjection





/*Start RabbitMQ*/
            services.AddMediatR(typeof(Startup).GetTypeInfo().Assembly);
            services.AddRabbitMQ();
            services.AddTransient<IRequestHandler<TransactionCreateCommand, bool>, TransactionCommandHandler>();
            /*End RabbitMQ*/




using Aforo255.Cross.Event.Src.Bus;
using Microsoft.AspNetCore.Mvc;
using MS.AFORO255.Deposit.DTOs;
using MS.AFORO255.Deposit.Messages.Commands;
using MS.AFORO255.Deposit.Services;
using System;

namespace MS.AFORO255.Deposit.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class TransactionController : ControllerBase
    {
        private readonly IEventBus _bus;
        private readonly ITransactionService _transactionService;
        public TransactionController(IEventBus bus, ITransactionService transactionService)
        {
            _bus = bus;
            _transactionService = transactionService;
        }

        [HttpPost("Deposit")]
        public IActionResult Deposit([FromBody] TransactionRequest request)
        {
            Models.Transaction transaction = new Models.Transaction()
            {
                AccountId = request.AccountId,
                Amount = request.Amount,
                CreationDate = DateTime.Now.ToShortDateString(),
                Type = "Deposit"
            };
            transaction = _transactionService.Deposit(transaction);

            var transactionCreateCommand = new TransactionCreateCommand(
                   idTransaction: transaction.Id,
                   amount: transaction.Amount,
                   type: transaction.Type,
                   creationDate: transaction.CreationDate,
                   accountId: transaction.AccountId
                );
            _bus.SendCommand(transactionCreateCommand);

            return Ok(transaction);
        }
    }
}




MICROSERVICIO HISTORICO



  "rabbitmq": {
    "username": "aforo255",
    "password": "aforo255",
    "virtualHost": "/",
    "port": 5672,
    "hostname": "localhost"
  }





using Aforo255.Cross.Event.Src.Events;

namespace MS.AFORO255.History.Messages.Events
{
    public class TransactionCreatedEvent : Event
    {
        public TransactionCreatedEvent(int idTransaction, decimal amount, string type, 
            string creationDate, int accountId)
        {
            IdTransaction = idTransaction;
            Amount = amount;
            Type = type;
            CreationDate = creationDate;
            AccountId = accountId;
        }

        public int IdTransaction { get; set; }
        public decimal Amount { get; set; }
        public string Type { get; set; }
        public string CreationDate { get; set; }
        public int AccountId { get; set; }

    }
}






using Aforo255.Cross.Event.Src.Bus;
using MS.AFORO255.History.Messages.Events;
using MS.AFORO255.History.Models;
using MS.AFORO255.History.Services;
using System.Threading.Tasks;

namespace MS.AFORO255.History.Messages.EventHandlers
{
    public class TransactionEventHandler : IEventHandler<TransactionCreatedEvent>
    {
        private readonly IHistoryService _historyService;

        public TransactionEventHandler(IHistoryService historyService)
        {
            _historyService = historyService;
        }

        public Task Handle(TransactionCreatedEvent @event)
        {
            _historyService.Add(new HistoryTransaction()
            {
                IdTransaction = @event.IdTransaction,
                Amount = @event.Amount,
                Type = @event.Type,
                CreationDate = @event.CreationDate,
                AccountId = @event.AccountId

            });
            return Task.CompletedTask;

        }
    }
}






/*Start - RabbitMQ*/
            services.AddMediatR(typeof(Startup));
            services.AddRabbitMQ();

            services.AddTransient<TransactionEventHandler>();
            services.AddTransient<IEventHandler<TransactionCreatedEvent>, TransactionEventHandler>();
            /*End - RabbitMQ*/





private void ConfigureEventBus(IApplicationBuilder app)
        {
            var eventBus = app.ApplicationServices.GetRequiredService<IEventBus>();
            eventBus.Subscribe<TransactionCreatedEvent, TransactionEventHandler>();
        }





ConfigureEventBus(app);






NOTIFICACIONES


using Aforo255.Cross.Event.Src.Events;

namespace MS.AFORO255.Deposit.Messages.Events
{
    public class NotificationCreatedEvent : Event
    {
        public NotificationCreatedEvent(int idTransaction, decimal amount, string type,
            string messageBody, string address, int accountId)
        {
            IdTransaction = idTransaction;
            Amount = amount;
            Type = type;
            MessageBody = messageBody;
            Address = address;
            AccountId = accountId;
        }

        public int IdTransaction { get; set; }
        public decimal Amount { get; set; }
        public string Type { get; set; }
        public string MessageBody { get; protected set; }
        public string Address { get; protected set; }
        public int AccountId { get; set; }

    }
}









using Aforo255.Cross.Event.Src.Commands;

namespace MS.AFORO255.Deposit.Messages.Commands
{
    public class NotificationCreateCommand : Command
    {
        public NotificationCreateCommand(int idTransaction, decimal amount, string type,
            string messageBody, string address, int accountId)
        {
            IdTransaction = idTransaction;
            Amount = amount;
            Type = type;
            MessageBody = messageBody;
            Address = address;
            AccountId = accountId;
        }

        public int IdTransaction { get; protected set; }
        public decimal Amount { get; protected set; }
        public string Type { get; protected set; }
        public string MessageBody { get; protected set; }
        public string Address { get; protected set; }
        public int AccountId { get; protected set; }
    }

}









using Aforo255.Cross.Event.Src.Bus;
using MediatR;
using MS.AFORO255.Deposit.Messages.Commands;
using MS.AFORO255.Deposit.Messages.Events;
using System.Threading;
using System.Threading.Tasks;

namespace MS.AFORO255.Deposit.Messages.CommandHandlers
{
    public class NotificationCommandHandler : IRequestHandler<NotificationCreateCommand, bool>
    {
        private readonly IEventBus _bus;

        public NotificationCommandHandler(IEventBus bus)
        {
            _bus = bus;
        }

        public Task<bool> Handle(NotificationCreateCommand request, 
            CancellationToken cancellationToken)
        {
            _bus.Publish(new NotificationCreatedEvent(
                    request.IdTransaction,
                    request.Amount,
                    request.Type,
                    request.MessageBody,
                    request.Address,
                    request.AccountId
                ));
            return Task.FromResult(true);
        }

    }
}






services.AddTransient<IRequestHandler<NotificationCreateCommand, bool>, NotificationCommandHandler>();





var notificationCreateCommand = new NotificationCreateCommand(
                           idTransaction: transaction.Id,
                           amount: transaction.Amount,
                           type: transaction.Type,
                           messageBody: $"Se proceso el {transaction.Type} con el monto de {transaction.Amount} de su cuenta {transaction.AccountId}",
                           address: "test@gmail.com",
                           accountId: transaction.AccountId
                        );
            _bus.SendCommand(notificationCreateCommand);




MICROSERVICIOS NOTIFICACION


using Aforo255.Cross.Event.Src.Events;

namespace MS.AFORO255.Notification.Messages.Events
{
    public class NotificationCreatedEvent : Event
    {
        public NotificationCreatedEvent(int idTransaction, decimal amount, string type,
            string messageBody, string address, int accountId)
        {
            IdTransaction = idTransaction;
            Amount = amount;
            Type = type;
            MessageBody = messageBody;
            Address = address;
            AccountId = accountId;
        }

        public int IdTransaction { get; set; }
        public decimal Amount { get; set; }
        public string Type { get; set; }
        public string MessageBody { get; protected set; }
        public string Address { get; protected set; }
        public int AccountId { get; set; }

    }
}









using Aforo255.Cross.Event.Src.Bus;
using MS.AFORO255.Notification.Messages.Events;
using MS.AFORO255.Notification.Models;
using MS.AFORO255.Notification.Repositories;
using System;
using System.Threading.Tasks;

namespace MS.AFORO255.Notification.Messages.EventHandlers
{
    public class NotificationEventHandler : IEventHandler<NotificationCreatedEvent>
    {
        private readonly ContextDatabase _contextDatabase;

        public NotificationEventHandler(ContextDatabase contextDatabase)
        {
            _contextDatabase = contextDatabase;
        }

        public Task Handle(NotificationCreatedEvent @event)
        {
            /*Register DB*/
            SendMail sendMail = new SendMail()
            {
                SendDate = DateTime.Now.ToShortDateString(),
                Type = @event.Type,
                Message = @event.MessageBody,
                Address = @event.Address,
                AccountId = @event.AccountId
            };
            _contextDatabase.SendMail.Add(sendMail);
            _contextDatabase.SaveChanges();

            /*Send Mail*/


            return Task.CompletedTask;

        }
    }
}







/*Start - RabbitMQ*/
            services.AddMediatR(typeof(Startup));
            services.AddRabbitMQ();

            services.AddTransient<NotificationEventHandler>();
            services.AddTransient<IEventHandler<NotificationCreatedEvent>, NotificationEventHandler>();
            /*End - RabbitMQ*/






private void ConfigureEventBus(IApplicationBuilder app)
        {
            var eventBus = app.ApplicationServices.GetRequiredService<IEventBus>();
            eventBus.Subscribe<NotificationCreatedEvent, NotificationEventHandler>();
        }




NUGET

Polly
Aforo255.Cross.Http




services.AddProxyHttp();




  "proxy": {
    "urlAccountDeposit": "http://localhost:5002/api/account/deposit"
  }




namespace MS.AFORO255.Deposit.DTOs
{
    public class AccountRequest
    {
        public int IdAccount { get; set; }
        public decimal Amount { get; set; }
    }
}





using MS.AFORO255.Deposit.DTOs;
using MS.AFORO255.Deposit.Models;
using System.Threading.Tasks;

namespace MS.AFORO255.Deposit.Services
{
    public interface IAccountService
    {
        Task<bool> DepositAccount(AccountRequest request);
        bool DepositReverse(Transaction request);
        bool Execute(Transaction request);

    }
}






using Aforo255.Cross.Http.Src;
using Microsoft.Extensions.Configuration;
using MS.AFORO255.Deposit.DTOs;
using MS.AFORO255.Deposit.Models;
using Polly;
using Polly.CircuitBreaker;
using System;
using System.Threading.Tasks;

namespace MS.AFORO255.Deposit.Services
{
    public class AccountService : IAccountService
    {
        private readonly IConfiguration _configuration;
        private readonly ITransactionService _transactionService;
        private readonly IHttpClient _httpClient;

        public AccountService(IConfiguration configuration, ITransactionService 
            transactionService, IHttpClient httpClient)
        {
            _configuration = configuration;
            _transactionService = transactionService;
            _httpClient = httpClient;
        }


        public async Task<bool> DepositAccount(AccountRequest request)
        {
            string uri = _configuration["proxy:urlAccountDeposit"];
            var response = await _httpClient.PostAsync(uri, request);
            response.EnsureSuccessStatusCode();
            return true;

        }

        public bool DepositReverse(Transaction request)
        {
            _transactionService.DepositReverse(request);
            return true;

        }

        public bool Execute(Transaction request)
        {
            bool response = false;

            var circuitBreakerPolicy = Policy.Handle<Exception>().
                CircuitBreaker(3, TimeSpan.FromSeconds(15));

            var retry = Policy.Handle<Exception>()
                    .WaitAndRetryForever(attemp => TimeSpan.FromSeconds(15))
                    .Wrap(circuitBreakerPolicy);

            retry.Execute(() =>
            {
                if (circuitBreakerPolicy.CircuitState == CircuitState.Closed)
                {
                    circuitBreakerPolicy.Execute(() =>
                    {
                        AccountRequest account = new AccountRequest()
                        {
                            Amount = request.Amount,
                            IdAccount = request.AccountId
                        };
                        response = DepositAccount(account).Result;
                    });
                }

                if (circuitBreakerPolicy.CircuitState != CircuitState.Closed)
                {
                    Transaction transaction = new Transaction()
                    {
                        AccountId = request.AccountId,
                        Amount = request.Amount,
                        CreationDate = DateTime.Now.ToShortDateString(),
                        Type = "Deposit Reverse"
                    };
                    DepositReverse(transaction);
                    response = false;
                }
            });

            return response;

        }
    }
}









using Aforo255.Cross.Event.Src.Bus;
using Microsoft.AspNetCore.Mvc;
using MS.AFORO255.Deposit.DTOs;
using MS.AFORO255.Deposit.Messages.Commands;
using MS.AFORO255.Deposit.Services;
using System;

namespace MS.AFORO255.Deposit.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class TransactionController : ControllerBase
    {
        private readonly IEventBus _bus;
        private readonly ITransactionService _transactionService;
        private readonly IAccountService _accountService;

        public TransactionController(IEventBus bus, ITransactionService transactionService,
             IAccountService accountService)
        {
            _bus = bus;
            _transactionService = transactionService;
            _accountService = accountService;
        }

        [HttpPost("Deposit")]
        public IActionResult Deposit([FromBody] TransactionRequest request)
        {
            Models.Transaction transaction = new Models.Transaction()
            {
                AccountId = request.AccountId,
                Amount = request.Amount,
                CreationDate = DateTime.Now.ToShortDateString(),
                Type = "Deposit"
            };
            transaction = _transactionService.Deposit(transaction);

            bool isProccess = _accountService.Execute(transaction);
            if (isProccess)
            {
                var transactionCreateCommand = new TransactionCreateCommand(
                   idTransaction: transaction.Id,
                   amount: transaction.Amount,
                   type: transaction.Type,
                   creationDate: transaction.CreationDate,
                   accountId: transaction.AccountId
                );
                _bus.SendCommand(transactionCreateCommand);

                var notificationCreateCommand = new NotificationCreateCommand(
                               idTransaction: transaction.Id,
                               amount: transaction.Amount,
                               type: transaction.Type,
                               messageBody: $"Se proceso el {transaction.Type} con el monto de {transaction.Amount} de su cuenta {transaction.AccountId}",
                               address: "test@gmail.com",
                               accountId: transaction.AccountId
                            );
                _bus.SendCommand(notificationCreateCommand);

            }
            return Ok(transaction);
        }
    }
}






 services.AddScoped<IAccountService, AccountService>();




