SESION 01 NET 5
==============
 
docker pull mysql
docker pull mcr.microsoft.com/mssql/server:2019-latest
docker pull postgres
docker pull mongo	
docker pull mariadb
 
 
docker network create  micro 
docker inspect micro 
 
 
# MYSQL
 
	docker run --name mysql-database --network micro -v c:/docker/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=Aforo255#2019 -p 3307:3306 -p 33062:33060 -d mysql
 
	docker run --name mysql-database --network micro -e MYSQL_ROOT_PASSWORD=Aforo255#2019 -p 3307:3306 -p 33062:33060 -d mysql
 
# SQL
	
	docker run -e "ACCEPT_EULA=Y" --network micro -v c:/docker/sqlserver/data:/var/opt/mssql/data -v c:/docker/sqlserver/log:/var/opt/mssql/log -v c:/docker/sqlserver/secrets:/var/opt/mssql/secrets -e "SA_PASSWORD=Aforo255#2019"  -p 1434:1433 --name sql-database -d mcr.microsoft.com/mssql/server:2019-latest
 
	docker run -e "ACCEPT_EULA=Y" --network micro -e "SA_PASSWORD=Aforo255#2019"  -p 1434:1433 --name sql-database -d mcr.microsoft.com/mssql/server:2019-latest
 
# POSTGRES
 
	docker run --name postgres-database --network micro -v c:/docker/postgres:/var/lib/postgresql/data -e POSTGRES_PASSWORD=Aforo255#2019  -d -p 5434:5432  postgres
 
	docker run --name postgres-database --network micro -e POSTGRES_PASSWORD=Aforo255#2019  -d -p 5434:5432  postgres
 
# MONGODB
 
 
	docker run -p 27018:27017 --network micro -v c:/docker/mongo:/etc/mongo -e MONGO_INITDB_ROOT_USERNAME=aforo255 -e MONGO_INITDB_ROOT_PASSWORD=Aforo255#2019 --name mongo-database -d mongo	
	
	docker run -p 27018:27017 --network micro -e MONGO_INITDB_ROOT_USERNAME=aforo255 -e MONGO_INITDB_ROOT_PASSWORD=Aforo255#2019 --name mongo-database -d mongo	
 
# MARIADB
 
	docker run --name maria-database --network micro -v c:/docker/mariadb:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=Aforo255#2019 -p 3310:3306 -p 33061:33060 -d mariadb
 
	docker run --name maria-database --network micro -e MYSQL_ROOT_PASSWORD=Aforo255#2019 -p 3310:3306 -p 33061:33060 -d mariadb
 
 
 
 
SCRIPTS DE BASE DE DATOS
 
MYSQL
======
 
CREATE DATABASE db_security;
 
USE db_security;
 
CREATE TABLE IF NOT EXISTS Access(
UserId INT AUTO_INCREMENT PRIMARY KEY,
Fullname VARCHAR(255) NOT NULL,
Username VARCHAR(50) NOT NULL,
Password VARCHAR(50) NOT NULL
);
 
INSERT INTO Access(Fullname, Username, PASSWORD)
VALUES('Ivan Cuadros Altamirano', 'aforo255','123456');
 
SELECT * FROM Access;
 
 
SQL SERVER
===========
 
 
 
CREATE DATABASE db_account;
GO
 
USE db_account;
 
CREATE TABLE Customer(
	IdCustomer INT PRIMARY KEY,
	FullName VARCHAR(150),
	Email VARCHAR(50)
);
 
select * from Customer;
 
INSERT INTO Customer VALUES(1,'Ivan Cuadros Altamirano','icuadros@aforo255.com');
INSERT INTO Customer VALUES(2,'Leonel Messi','lmessi@aforo255.com');
INSERT INTO Customer VALUES(3,'Paolo Guerrero','pguerrero@aforo255.com');
INSERT INTO Customer VALUES(4,'Andrea Pirlo','apirlo@aforo255.com');
INSERT INTO Customer VALUES(5,'Renato Tapia','rtapia@aforo255.com');
 
CREATE TABLE Account(
	IdAccount INT PRIMARY KEY, 
	TotalAmount NUMERIC(18,2),
	IdCustomer INT
);
 
 
INSERT INTO Account VALUES(1,1000,1);
INSERT INTO Account VALUES(2,5000,1);
INSERT INTO Account VALUES(3,300,2);
INSERT INTO Account VALUES(4,600,1);
INSERT INTO Account VALUES(5,400,2);
INSERT INTO Account VALUES(6,100,1);
INSERT INTO Account VALUES(7,1000,3);
INSERT INTO Account VALUES(8,2000,4);
INSERT INTO Account VALUES(9,5000,5);
INSERT INTO Account VALUES(10,1000,2);
 
 
SELECT * FROM Account;
 
ALTER TABLE Account
ADD FOREIGN KEY (IdCustomer) REFERENCES Customer(IdCustomer);
 
 
 
POSTGRES
==========
CREATE DATABASE db_account;
 
CREATE TABLE Transaction(
	Id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	Amount DECIMAL,
	Type VARCHAR(30),
	CreationDate VARCHAR(50),
	AccountId INTEGER
);
 
--INSERT INTO Transaction(Amount,Type,AccountId) VALUES(1000,'Deposit','05/12/2019',2)
 
select * from Transaction;
 
 
 
 
MARIA
======
 
 
CREATE DATABASE db_notification;
 
USE  db_notification;
 
CREATE TABLE SendMail(
	SendMailId INT AUTO_INCREMENT PRIMARY KEY,
    	SendDate VARCHAR(10),
	Type VARCHAR(20),
	Message VARCHAR(250),
	Address VARCHAR(50),
    	AccountId INT
);
 
 
SELECT * FROM SendMail;
 
 
 
LINK
====
 
 
DRIVE
https://drive.google.com/drive/folders/1Xh6MiDJ2JU3kYU95l56NJztedSnL6YO_?usp=sharing
 
 
CODIGO
 
 
{
  "mysql": {
    "cn": "server=localhost;port=3307;database=db_security;user=root;password=Aforo255#2019"
  }
}
 
 
 
MySql.EntityFrameworkCore 5.0.0
 
 
 
using System.ComponentModel.DataAnnotations;
 
namespace MS.AFORO255.Security.Models
{
    public class Access
    {
        [Key]
        public int UserId { get; set; }
        public string Fullname { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
    }
}
 
 
 
 
 
using Microsoft.EntityFrameworkCore;
using MS.AFORO255.Security.Models;
 
namespace MS.AFORO255.Security.Repositories
{
    public class ContextDatabase : DbContext
    {
        public ContextDatabase(DbContextOptions<ContextDatabase> options) : base(options)
        {
        }
 
        public DbSet<Access> Access { get; set; }
    }
}
 
 
 
using MS.AFORO255.Security.Models;
using System.Collections.Generic;
 
namespace MS.AFORO255.Security.Services
{
    public interface IAccessService
    {
        IEnumerable<Access> GetAll();
        bool Validate(string userName, string password);
 
    }
}
 
 
 
using MS.AFORO255.Security.Models;
using MS.AFORO255.Security.Repositories;
using System.Collections.Generic;
using System.Linq;
 
namespace MS.AFORO255.Security.Services
{
    public class AccessService : IAccessService
    {
        private readonly ContextDatabase _contextDatabase;
 
        public AccessService(ContextDatabase contextDatabase)
        {
            _contextDatabase = contextDatabase;
        }
 
 
        public IEnumerable<Access> GetAll()
        {
            return _contextDatabase.Access.ToList();
        }
 
        public bool Validate(string userName, string password)
        {
            var list = _contextDatabase.Access.ToList();
            var access = list.Where(x => x.Username == userName && x.Password == password)
                .FirstOrDefault();
            if (access != null)
                return true;
            return false;
        }
    }
}
 
 
 
 
 
using Microsoft.AspNetCore.Mvc;
using MS.AFORO255.Security.Services;
 
namespace MS.AFORO255.Security.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly IAccessService _accessService;
 
        public AuthController(IAccessService accessService)
        {
            _accessService = accessService;
        }
 
        [HttpGet]
        public IActionResult Get()
        {
            return Ok(_accessService.GetAll());
        }
 
    }
}
 
 
 
 
 public void ConfigureServices(IServiceCollection services)
        {
 
            services.AddControllers();
 
            services.AddDbContext<ContextDatabase>(
               opt =>
               {
                   opt.UseMySQL(Configuration["mysql:cn"]);
               });
            services.AddScoped<IAccessService, AccessService>();
 
        }
 
 
 
http://localhost:5001/api/auth
 
 
{
  "mysql": {
    "cn": "server=localhost;port=3307;database=db_security;user=root;password=Aforo255#2019"
  },
  "jwt": {
    "enabled": true,
    "issuer": "http://ivancuadros.com",
    "audience": "web",
    "key": "CLave#12548MIentrasMas45566Mejor____%%%dddd",
    "expiration": "30"
  }
}
 
 
 
 
 
 
 
 
namespace MS.AFORO255.Security.DTOs
{
    public class AuthRequest
    {
        public string UserName { get; set; }
        public string Password { get; set; }
 
    }
}
 
 
 
 
public void ConfigureServices(IServiceCollection services)
        {
 
            services.AddControllers();
 
            services.AddDbContext<ContextDatabase>(
               opt =>
               {
                   opt.UseMySQL(Configuration["mysql:cn"]);
               });
            services.AddScoped<IAccessService, AccessService>();
            services.Configure<JwtOptions>(Configuration.GetSection("jwt"));
 
        }
 
 
 
 
 
 
 
 
 
 
using Microsoft.AspNetCore.Mvc;
using MS.AFORO255.Security.Services;
using Microsoft.Extensions.Options;
using Aforo255.Cross.Token.Src;
using MS.AFORO255.Security.DTOs;
 
namespace MS.AFORO255.Security.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly IAccessService _accessService;
        private readonly JwtOptions _jwtOption;
 
        public AuthController(IAccessService accessService, IOptionsSnapshot<JwtOptions> jwtOption)
        {
            _accessService = accessService;
            _jwtOption = jwtOption.Value;
        }
 
        [HttpGet]
        public IActionResult Get()
        {
            return Ok(_accessService.GetAll());
        }
 
        [HttpPost]
        public IActionResult Post([FromBody] AuthRequest request)
        {
            if (!_accessService.Validate(request.UserName, request.Password))
            {
                return Unauthorized();
            }
 
            Response.Headers.Add("access-control-expose-headers", "Authorization");
            Response.Headers.Add("Authorization", JwtToken.Create(_jwtOption));
 
            return Ok();
        }
 
 
    }
}
 
 
 
POST 
http://localhost:5001/api/auth
 
 
{
	"UserName":"aforo255",
	"Password":"123456"
}
 
 
URLS
 
{
  "UrlSecurity": "http://localhost:5001/api/auth",
  "UrlAccount": "http://localhost:5002/api/account",
  "UrlDeposit": "http://localhost:5003/api/transaction/deposit",
  "UrlWithdrawal": "http://localhost:5004/api/transaction/withdrawal",
  "UrlHistory": "http://localhost:5005/api/history"
}
 
 
SEGURIDAD
 
{
	"UserName":"aforo255",
	"Password":"123456"
}
 
 
DEPOSITO Y RETIRO
 
{
	"AccountId":1,
	"Amount":500
}
 
 